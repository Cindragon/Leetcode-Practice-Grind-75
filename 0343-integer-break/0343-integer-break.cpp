class Solution {
public:
    int integerBreak(int n) {
        vector<int> dp(n+1);
        dp[0]=0;
        dp[1]=0;
        dp[2]=1;
        for(int i=3;i<=n;i++){
            for(int j=1;j<=i/2;j++){
                dp[i]=max(max(j*(i-j), j*dp[i-j]), dp[i]);
            }
        }
        return dp[n];
    }
};

/*
定義dp數組：dp[i]的定義為拆分 i 的最大乘積
(拆分整數時，盡量拆成大小相近的數，相乘才會最大)。
使用 vector 定義 dp 數組
遞增公式：讓 j 從 1 開始遍歷，找最大值為
⼀個是 j * (i - j) 直接相乘，⼀個是 j * dp[i - j]，相當於是拆分(i - j)，
最後則是和 dp[i] 本體比較大小
對於每個 i（從 3 開始），我們考慮將它拆成兩部分：j 和 (i - j)。

   對於每個 j（1 <= j <= i / 2），比較以下兩種情況：
   - **j * (i - j)**：直接拆成兩個數相乘，不再繼續拆
   - **j * dp[i - j]**：拆成 j 和 dp[i - j]，也就是遞迴繼續拆 (i - j)
   取這兩種情況的最大值，並與目前的 dp[i] 比較後更新 dp[i]。

初始化：dp[0]跟dp[1]皆為0(因為無法拆分)，從dp[2]開始定義=1
遍歷順序：迴圈 i 從 3 開始遍歷，並且 j 則從 1 開始遍歷，j<=i/2(最多拆分到兩兩相同)
因為乘法具有交換律，j 與 i - j 對稱，超過一半就會重複。
最後回傳 dp[i]
*/